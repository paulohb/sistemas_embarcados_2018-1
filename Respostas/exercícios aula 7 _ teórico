Data: 24/06/2018
Nome: Paulo Henrique Bernardo Melo

1. Quantos pipes serão criados após as linhas de código a seguir? Por quê?
	(a) int pid;
		int	fd[2];
		pipe(fd);
		pid = fork();
	Sera criado apenas um pipe, pois a linha de codigo pipe(fd) foi executada por apenas um processo.
	(b) int pid;
		int	fd[2];
		pid = fork();
		pipe(fd);
	Serão criados 2 pipes, pois a linha de codigo pipe(fd) foi executada por dois processos diferentes depois do
	fork() ser executado.

2. Apresente mais cinco sinais importantes do ambiente Unix, além do SIGSEGV, SIGUSR1, SIGUSR2, SIGALRM e SIGINT. Quais são suas características e utilidades?
SIGHUP - Sinal emitido aos processos associados a um terminal quanto este se desconecta. Este sinal também  emitido a cada processo
quando o chefe termina sua execução.
SIGQUIT - Sinal emitido aos processos do terminal quando com a tecla de abandono (quit ou ctrl+d) do teclado são acionadas.
SIGILL - Quando uma instrução ilegal é detectada.
SIGTRAP - Sinal emitido após cada instrulção em caso de geração de traces dos processos.
SIGIOT - Sinal emitido em caso de problemas de hardware.

3. Considere o código a seguir:

	 1. #include <signal.h>
	 2. #include <unistd.h>
	 3. #include <stdio.h>
	 4. #include <stdlib.h>
	 5.
	 6. void tratamento_alarme(int sig)
	 7. {
	 8. 	system("date");
	 9. 	alarm(1);
	10. }
	11. 
	12. int main()
	13. {
	14. 	signal(SIGALRM, tratamento_alarme);
	15. 	alarm(1);
	16. 	printf("Aperte CTRL+C para acabar:\n");
	17. 	while(1);
	18. 	return 0;
	19. }

Sabendo que a função alarm() tem como entrada a quantidade de segundos para terminar a contagem, quão precisos são os alarmes 
criados neste código? De onde vem a imprecisão? Este é um método confiável para desenvolver aplicações em tempo real?

O código funciona normalmente, retorna a data de 1 em 1 segundo. O problema ocorre quando o sinal é acionado durante
uma operação de I/O proveniente de outra parte do código, o que causa sua interrupção e não é executada até o final.

