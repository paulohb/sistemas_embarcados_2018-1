Nome: Paulo Henrique Bernardo Melo

Processos_1.md

1. Como se utiliza o comando 'ps' para:

	utilizando-se a ajuda $man ps:
	
	(a) Mostrar todos os processos rodando na máquina?

		Alguns exemplos:
		  ps -e
		  ps -ef
		  ps -eF
		  ps -ely
		  ps ax
		  ps axu
		  ps -A
		  ps - aux
	
	(b) Mostrar os processos de um usuário?

	ps -u username
	
	(c) Ordenar todos os processos de acordo com o uso da CPU?

	ps aux --sort=-pcpu

	(d) Mostrar a quanto tempo cada processo está rodando?

	ps -ef --sort=start_time

2. De onde vem o nome fork()?

Vem do inglês que significa "bifurcação".

3. Quais são as vantagens e desvantagens em utilizar:
	(a) system()?
		Vantagem: executar uma linha de comando pelo código em c;
		Desvantagem: dá brechas à falhas de execução, pois depende muito do sistema.
	
	(b) fork() e exec()?
		Vantagens: a função fork() cria uma cópia do processo atual e em seguida a função exec() que substitui o 
		conteúdo do novo processo por um novo programa.		
		Desvantagens: ter cautela dos dois processos gerados não mexerem na mesma variável ou aqruivo.

4. É possível utilizar o exec() sem executar o fork() antes?

	É possível, mas tudo que estiver abaixo do função exec() não será executado, pois depois de realizar o comando, a execução do processo termina. 

5. Quais são as características básicas das seguintes funções:
	(a) execp()?
		
	int execlp(const char *file, const char arg,.../(char *)NULL */)

	file: filename associated with the file being executed

	*const char arg and ellipses: describe a list of one more pointers to null-terminated strings that represent the argument list 		available to the executed program.

	(b) execv()?

	int execv(const char *path, char *const argv[])
	path: should point to the path of the file being executed.
	argv[]: is a null terminated array of character pointers.

	(c) exece()?

	The execle() and execvpe() functions allow the caller to specify the environment of the executed program via the argument envp. The 	envp argument is an array of pointers to null-terminated strings and must be terminated by a null pointer. The other functions take the environment for the new process image from the external variable environ in the calling process.	

	(d) execvp()?

	int execvp(const char *file, char *const argv[]);
	file: points to the fine name associated with the file being executed. The file could be in the current path.
	argv: is a null terminated array of character pointers.

	(e) execve()?

	int execve(const char *filename, char *const argv[], char *const envp[]);

	execve(): executes the program pointed to by filename must be either a binary executable, or a script starting with a line of the form:

	#! interpreter [optional-arg]

	argv is an array of argument strings passed to the new program. By convention, the first of these strings (i.e, argv[0]) should contain the filename associated with the file being executed.

	envp is an array of strings, conventionally of the form key=value, which are passed as environment to the new program. The argv and envp arrays must each include a null pointer at the end of the array.

	The argument vector and environment can be accessed by the called program's main function, when it is defined as:

	int main(int argc, char *argv[], char *envp[])

	Note, however, that the use of a third argument to the main function is not specified in POSIX.1; according to POSIX.1, the environment should be accessed via the external variable environ(7).	

	(f) execle()?

	int execle(const char *path, const char *arg, .../*, (char *) NULL, char * const envp[] */);

	char * const envp[]: allow the caller to specify the environment of the executed program via the argument envp.

	envp: This argument is an array of pointers to null-terminated strings and must be terminated by a null pointer. The other functions take the environment for the new process image from the external variable environ in the calling process.

